{"version":3,"sources":["complianceModule.test.js"],"names":["ganache","require","Web3","fs","provider","web3","bytecode","readFileSync","compInterface","bytecode1","interface1","compliance","picopsAddress","complianceAddress","result1","deploy","accounts1","eth","getAccounts","Contract","JSON","parse","data","send","from","gas","options","address","arguments","setProvider","beforeEach","t","truthy","accounts","methods","certify","x","isSubscriptionPermitted","call","is","y","isRedemptionPermitted"],"mappings":"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","file":"complianceModule.test.js","sourcesContent":["import test from 'ava';\n\nconst ganache = require('ganache-cli');\nconst Web3 = require('web3');\nconst fs = require('fs');\n\nconst provider = ganache.provider();\nconst web3 = new Web3(provider);\n\nconst bytecode = fs.readFileSync('././out/contracts/ComplianceInterface.bin');\nconst compInterface = fs.readFileSync('././out/contracts/ComplianceInterface.abi');\n\nconst bytecode1 = fs.readFileSync('././out/contracts/SimpleCertifier.bin');\nconst interface1 = fs.readFileSync('././out/contracts/SimpleCertifier.abi');\n\n\nlet compliance;\nlet picopsAddress;\nlet complianceAddress;\nlet result1;\n\nconst deploy = async () => {\n  const accounts1 = await web3.eth.getAccounts();\n  result1 = await new web3.eth.Contract(JSON.parse(interface1))\n    .deploy({ data: `0x${bytecode1}` })\n    .send({ from: accounts1[0], gas: '1000000' });\n  picopsAddress = result1.options.address;\n\n\n  compliance = await new web3.eth.Contract(JSON.parse(compInterface))\n    .deploy({ data: `0x${bytecode}`, arguments: [picopsAddress] })\n    .send({ from: accounts1[0], gas: '6000000' });\n\n  complianceAddress = compliance.options.address;\n\n\n  compliance.setProvider(provider);\n  result1.setProvider(provider);\n};\n\ntest.beforeEach(async () => {\n  await deploy();\n});\n\ntest('deploys a contract', async (t) => {\n  await t.truthy(complianceAddress);\n});\n\ntest('Checks if subscription is permitted', async (t) => {\n  const accounts = await web3.eth.getAccounts();\n  await result1.methods.certify(accounts[0]).send({ from: accounts[0] });\n  const x = await compliance.methods\n    .isSubscriptionPermitted(accounts[0], 1000000000000000000, 1000000000000000000).call();\n  t.is(x, true, 'subscription is permitted');\n});\n\ntest('Checks if redemption permitted', async (t) => {\n  const accounts = await web3.eth.getAccounts();\n  await result1.methods.certify(accounts[0]).send({ from: accounts[0] });\n  const y = await compliance.methods\n    .isRedemptionPermitted(accounts[0], 1000000000000000000, 1000000000000000000).call();\n  t.is(y, true, 'redemption is permitted');\n});\n"]}