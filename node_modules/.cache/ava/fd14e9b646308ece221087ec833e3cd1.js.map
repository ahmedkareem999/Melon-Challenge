{"version":3,"sources":["complianceModule1.test.js"],"names":["assert","require","ganache","Web3","fs","solc","provider","web3","bytecode","readFileSync","compInterface","bytecode1","interface1","accounts","compliance","picopsAddress","complianceAddress","picops","result1","deploy","accounts1","eth","getAccounts","Contract","JSON","parse","data","send","from","gas","options","address","console","log","arguments","setProvider","t","beforeEach","cb","pass","end","x1","methods","certify","x","isSubscriptionPermitted","call","is","y1","y","isRedemptionPermitted"],"mappings":"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","file":"complianceModule1.test.js","sourcesContent":["import test from 'ava';\nconst assert = require('assert');\nconst ganache = require('ganache-cli');\nconst Web3 = require('web3');\nconst fs = require('fs');\nconst solc = require('solc');\n\nconst provider = ganache.provider();\nconst web3 = new Web3(provider);\n\nconst bytecode = fs.readFileSync('./__contracts_ComplianceInterface_sol_ComplianceInterface.bin');\nconst compInterface = fs.readFileSync('./__contracts_ComplianceInterface_sol_ComplianceInterface.abi');\n\nconst bytecode1 = fs.readFileSync('./__contracts_SimpleCertifier_sol_SimpleCertifier.bin');\nconst interface1 = fs.readFileSync('./__contracts_SimpleCertifier_sol_SimpleCertifier.abi');\n\n\nlet accounts;\nlet compliance;\nlet picopsAddress;\nlet complianceAddress;\nlet picops;\nlet result1;\n\nconst deploy = async () => {\n    const accounts1 = await web3.eth.getAccounts();\n    result1 = await new web3.eth.Contract(JSON.parse(interface1))\n    .deploy({data : '0x' + bytecode1})\n    .send({from : accounts1[0], gas : '1000000'});\n\n    picopsAddress = result1.options.address;\n    console.log(picopsAddress);\n\n\n    compliance = await new web3.eth.Contract(JSON.parse(compInterface))\n    .deploy({data : '0x' + bytecode, arguments : [picopsAddress]})\n    .send({from : accounts1[0], gas : '6000000'});\n\n    complianceAddress = compliance.options.address;\n    console.log(complianceAddress);\n\n    compliance.setProvider(provider);\n    result1.setProvider(provider);\n  };\n\n  test('Account is verified', async t => {\n\n    beforeEach( async t => {\n      await t.deploy();\n\n    });\n\n  test.cb('deploys a contract', t => {\n    t.pass(complianceAddress);\n    t.end();\n\n  });\n\n  test.cb('Checks if subscription is permitted', async t => {\n    const accounts = await web3.eth.getAccounts();\n    let x1 = await result1.methods.certify(accounts[0]).send({from : accounts[0]});\n    let x = await compliance.methods.isSubscriptionPermitted(accounts[0],1000000000000000000,1000000000000000000).call();\n    t.is(x,true,'subscription is permitted');\n    t.end();\n\n  });\n\n    test.cb('Checks if redemption permitted', async t => {\n      const accounts = await web3.eth.getAccounts();\n      let y1 = await result1.methods.certify(accounts[0]).send({from : accounts[0]});\n      let y = await compliance.methods.isRedemptionPermitted(accounts[0],1000000000000000000,1000000000000000000).call();\n      t.is(y,true,'redemption is permitted');\n      t.end();\n\n    });\n});\n"]}